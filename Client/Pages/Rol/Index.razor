@page "/rol/index"
@using Microsoft.AspNetCore.Identity
@using RestaurantSystem.Core.Constants
@using RestaurantSystem.Core.CustomEntities
@using RestaurantSystem.Shared.Model
<PageTitle>Gestion de Roles</PageTitle>
@inject HttpClient httpClient
@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<MudText Typo="Typo.h6" Class="my-4">Roles</MudText>
<MudButton Class="mb-4" Variant="Variant.Filled" Color="Color.Success" OnClick="@OnCreateClick">Agregar</MudButton>

<MudTable Items="@roles" Hover="true" Breakpoint="Breakpoint.Sm" Filter="new Func<IdentityRole, bool>(FilterFunc1)" Loading="@IsLoading">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nombre</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Name</MudTd>
        <MudTd DataLabel="Acciones">
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary" OnClick="@(() => OnEditClick(context.Id))">Editar</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private IEnumerable<IdentityRole> roles { get; set; } = new List<IdentityRole>();
    private bool IsLoading { get; set; } = true;
    private string searchString = "";
    private bool FilterFunc1(IdentityRole element) => FilterFunc(element, searchString);


    protected override async Task OnInitializedAsync()
    {
        await LoadAll();
    }

    private async Task LoadAll()
    {
        IsLoading = true;
        var result = await httpClient.GetFromJsonAsync<ApiResponse<IEnumerable<IdentityRole>>>("api/rol/GetRoles");
        IsLoading = false;
        roles = result!.Data;
    }

    private bool FilterFunc(IdentityRole element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    void OnCreateClick()
    {
        NavManager.NavigateTo("/rol/create");
    }

    void OnEditClick(string Id)
    {
        NavManager.NavigateTo($"/rol/edit/{Id}");
    }


}
